#!/usr/bin/env bash

# SOURCE Andrew Paradi | https://github.com/andrewparadi/.files

# AP Bootstrap Standard Methods
prefix="ap::"
# status opt_code "Main update text" "optional script name override"
function status() {
  Reset="$(tput sgr0)"       # Text Reset
  Red="$(tput setaf 1)"          # Red
  Green="$(tput setaf 2)"        # Green
  Yellow="$(tput setaf 3)"          # Yellow
  Blue="$(tput setaf 4)"         # Blue
  div="********************************************************************************"
  if [ "$#" -lt 3 ]; then   # if no name override passed in, take name "ap" if $0 is status, $0 otherwise
    [ $(basename "${0}") = "status" ] && scriptname="ap" || scriptname=$(basename "${0}")
  else
    scriptname="${3}"
  fi
  case "${1}" in
    a)        echo ""; echo "${Blue}<|${scriptname:0:1}${Reset} [ ${2} ] ${div:$((${#2}+9))}" ;;
    b)        echo "${Green}ok: [ ${2} ] ${div:$((${#2}+9))}${Reset}" ;;
    s|status) echo "${Blue}<|${scriptname:0:1}${Reset} [ ${2} ] ${div:$((${#2}+9))}" ;;
    t|title)  echo "${Blue}<|${scriptname}${Reset} [ ${2} ] ${div:$((${#2}+8+${#scriptname}))}" ;;
    e|err)    echo "${Red}fatal: [ ${2} ] ${div:$((${#2}+12))}${Reset}" ;;
    w|warn)   echo "${Yellow}warn: [ ${2} ] ${div:$((${#2}+11))}${Reset}" ;;
  esac
}

# safe_download ./local/path/file.sh https://remote.com/path/file.sh
function safe_download() {
  timestamp="`date '+%Y%m%d-%H%M%S'`"
  if [ ! -f "$1" ]; then
    status a "Download ${1}"
    curl -s -o $1 $2
    status b "Download ${1}"
  else
    status a "Update ${1}"
    mv $1 $1.$timestamp
    curl -s -o $1 $2
    if diff -q "$1" "$1.$timestamp" > /dev/null; then rm $1.$timestamp; fi
    status b "Update ${1}"
  fi
}

# safe_source ./path/file.sh ~/.bashrc
function safe_source() {
  if [[ -z $(grep "$1" "$2") ]]; then echo "source $1" >> $2; fi
}

# runs script with bumper status output
function run_script() {
  exec=$*
  script=$1
  name=$(basename ${script})
  status a "${name}"
  ${exec}
  status b "${name}"
}

# use ~/.zshplugins -> supercrabtree/k with fallback to ls -la
function safe_k() {
  if type k &> /dev/null; then
    k -a $@
  else
    ls -la $@
  fi
}

# Killall Process from search
function killall() {
  if [ $# -eq 0 ]; then
    status e "Usage: killall <grep process search team>"
  else
		for pid in `ps -ef | grep "${1}" | awk '{print $2}'` ; do kill $pid ; done
	fi;
}

# Decapitate git repo ‚Äì¬†headless ‚Äì (disregard all local changes, reset back to master)
function decap() {
  git fetch --all
  if [ $# -eq 0 ]; then
    git reset --hard origin/master
  else
    git reset --hard $1
  fi
}

# toggle etchosts, swap default and .merge
# .raw.hosts .merge.hosts
function etc() {
  name="${prefix}${0}"
  wait=60
  if [ $# -eq 0 ]; then
    hosts_dir="/Users/me/.files/ansible/roles/etchosts/files"
    default=".raw-ads.hosts"; merge=".merge.hosts"
  elif [ $# -eq 2 ]; then
    hosts_dir="/Users/me/.files/ansible/roles/etchosts/files"; default=$1; merge=$2
  else
    hosts_dir=""; default=$1; merge=$2
  fi

  # determine if default hosts is currently installed at /etc/hosts
  default_diff=`diff /etc/hosts ${hosts_dir}/${default} | wc | awk '{print $1}'`

  if [ $default_diff -eq 0 ]; then
    current="${default}"; updated="${merge}"
  else
    current="${merge}"; updated="${default}"
    status w "Updating ${current} => ${updated} in ${wait} seconds..."
    sleep ${wait}
  fi

  status t "Update ${current} => ${updated}" "${name}"
  sudo cp ${hosts_dir}/${updated} /etc/hosts

  post_diff=`diff /etc/hosts ${hosts_dir}/${default} | wc | awk '{print $1}'`

  if [ $default_diff -eq $post_diff ]; then
    status e "${name} = ${current}. update failed."
  else
    sudo dscacheutil -flushcache  # flush dns cache
    sudo killall -HUP mDNSResponder
    status b "üç∫  Fin. ${name} = ${updated}"
  fi
  sudo -k # remove sudo permissions
}

# Rename all files to their first line
# in_dir/123431.txt that has first line of "Notes for Dec 16 2010"
# in_dir/123431.txt => out_dir/Notes for Dec 16 2010.txt
function rename_first_line() {
  name="${prefix}${0}"
  if [ $# -ne 2 ]; then
    status e "Usage: rename_first_line <in_dir> <out_dir>"
  else
    in_dir=$1
    out_dir=$2
    mkdir -p $out_dir

    status t "$in_dir/filename.ext => $out_dir/first_line.ext" "${name}"

    for file in $in_dir/*; do
      first_line=$(head -n 1 $file | cut -c-40 | awk '$1=$1')
      extension="${file##*.}"
      cp_err=$(cp "$file" "${out_dir}/${first_line}.${extension}" 2>&1)
      if [[ $cp_err != "" || $(diff -q $file ${out_dir}/${first_line}.${extension}) ]]; then
        status e "$file : $cp_err"
      # else
        # status b "$file => ${out_dir}/${first_line}.${extension}"
      fi
    done

    status b "${in_dir}/filename.ext => ${out_dir}/first_line.ext"
  fi
  status b "üç∫  Fin. ${in_dir} => ${out_dir}"
}

# Removes admin privileges
# Follows macOS-Security-and-Privacy-Guide ‚Äì¬†@drduh guidelines
# Find GeneratedUID of account with 
#   $ dscl . -read /Users/<username> GeneratedUID
# Remove from admin with 
#   $ sudo dscl . -delete /Groups/admin GroupMembers <GeneratedUID>
function chmod_admin() {
  name="${prefix}${0}"
  if [ $# -ne 1 ]; then
    status e "Usage: chmod_admin <username>"
  elif [[ "$(uname)" != "Darwin"  ]]; then
    status e "Usage: only run this command on macOS"
  else
    user=${1}
    status t "Remove '${user}' admin privileges" "${name}"
    # Check user is valid
    if ! dscl . list /users | grep -q "${user}"; then
      status e "'${user}' is not a user"
    elif [[ "${user}" == "admin" ]]; then
      status e "'${user}' should keep admin privileges"
    else
      status w "Removing '${user}' admin privileges in 3 seconds..."
      sleep 3
      status a "Remove '${user}' from admin"
      sudo dscl . -delete /Groups/admin GroupMembership ${user}
      status b "Delete '${user}' membership in /Groups/admin"
      user_UID=$(dscl . -read /Users/${user} GeneratedUID | cut -d ' ' -f 2)
      sudo dscl . -delete /Groups/admin GroupMembers ${user_UID}
      status b "Delete '${user_UID}' member in /Groups/admin"
      sudo -k
      status b "üç∫  Fin. '${user}' = standard"
    fi
  fi
}

# Hide / unhide use profile from login screens and moves home directory to /var/
# Follows macOS-Security-and-Privacy-Guide ‚Äì¬†@drduh guidelines
# https://support.apple.com/en-us/HT203998
# Hide from login screen 
#   $ sudo dscl . create /Users/hiddenuser IsHidden 1
# Hide home directory and share point
#   $ sudo mv /Users/hiddenuser /var/hiddenuser
#   $ sudo dscl . -create /Users/hiddenuser NFSHomeDirectory /var/hiddenuser
#   $ sudo dscl . -delete "/SharePoints/Hidden User's Public Folder"
function mv_user() {
  name="${prefix}${0}"
  if [ $# -ne 1 ]; then
    status e "Usage: hide_user <username>"
  elif [[ "$(uname)" != "Darwin"  ]]; then
    status e "Usage: only run this command on macOS"
  else
    user=${1}
    status t "Hide '${user}' from login & Finder" "${name}"

    # Check user is valid
    if ! dscl . list /users | grep -q "${user}"; then
      status e "'${user}' is not a user"
    elif [[ "${user}" == "$(whoami)" ]]; then
      status e "'${user}' should not hide oneself"
    else
      userStatus=$(dscl . read /Users/${user} IsHidden | cut -f 2 -d " ")
      visible="0"
      if [ "${userStatus}" = "${visible}" ]; then
        status w "Hiding '${user}' from login & Finder in 3 seconds..."
        sleep 3
        status a "Hide '${user}' from login & Finder"
        sudo dscl . create /Users/${user} IsHidden 1
        status b "Hide '${user}' from login"
        sudo mv /Users/${user} /var/${user}
        status b "Move home directory to /var/${user}"
        sudo dscl . -create /Users/${user} NFSHomeDirectory /var/${user}
        status b "Update ${user} record with home directory /var/${user}"
        sudo dscl . -delete "/SharePoints/${user}'s Public Folder"
        status b "Remove ${user} Public Folder"
        result="hidden"
      else
        status w "Restoring '${user}' to login & Finder in 3 seconds..."
        sleep 3
        status a "Restore '${user}' to login & Finder"
        sudo dscl . create /Users/${user} IsHidden 0
        status b "Restore '${user}' to login"
        sudo mv /var/${user} /Users/${user}
        status b "Move home directory to /Users/${user}"
        sudo dscl . -create /Users/${user} NFSHomeDirectory /Users/${user}
        status b "Update ${user} record with home directory /Users/${user}"
        sudo dscl . -create "/SharePoints/${user}'s Public Folder"
        status b "Restore ${user} Public Folder"
        result="restored"
      fi      

      sudo -k
      status b "üç∫  Fin. '${user}' = ${result}"
    fi
  fi
}

# Other Sources
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# https://github.com/oieduardorabelo/dotfiles/blob/master/functions.sh

# Reload Antibody
function antiup() {
	rm -rf `antibody home`
	bash -c "antibody bundle < ~/.zshplugins > ~/.zsh_plugins.sh"
	cat ~/.zsh_plugins.sh
	reload
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`‚Ä¶";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn‚Äôt break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}


# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}


# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      pax -r < "$1"                         ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
	fi
}
